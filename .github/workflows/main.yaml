name: Continuous integration

on:
  push:
    branches:
      - master
      - '[0-9]+.[0-9]+'
    tags:
      - '*'
    paths-ignore:
      - example-project/**
  pull_request:

permissions:
  actions: write
  contents: write

env:
  HAS_SECRETS: ${{ secrets.HAS_SECRETS }}

jobs:
  main:
    name: Continuous integration
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    steps:
      - run: docker system prune --all --force
      - run: dpkg -l
      - run: pip install pyOpenSSL --upgrade
      - run: python3 -m pip freeze

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: camptocamp/initialise-gopass-summon-action@v2
        with:
          ci-gpg-private-key: ${{secrets.CI_GPG_PRIVATE_KEY}}
          github-gopass-ci-token: ${{secrets.GOPASS_CI_GITHUB_TOKEN}}
          patterns: pypi docker
        if: env.HAS_SECRETS == 'HAS_SECRETS'

      - run: echo "${HOME}/.local/bin" >> ${GITHUB_PATH}
      - run: python3 -m pip install --user --requirement=requirements.txt
      - run: poetry build
        env:
          POETRY_DYNAMIC_VERSIONING_BYPASS: 0.0.0
      - run: python3 -m pip install --user --force-reinstall dist/c2cciutils-0.0.0-py3-none-any.whl[checks,publish]
      - run: rm -rf dist build

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: "pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}\npre-commit-"
      - run: pre-commit run --all-files
        env:
          SKIP: poetry-lock,pipenv-lock,helm-lock
      - run: git diff --exit-code --patch > /tmp/pre-commit.patch || true
        if: failure()
      - uses: actions/upload-artifact@v4
        with:
          name: Apply pre-commit fix.patch
          path: /tmp/pre-commit.patch
          retention-days: 1
        if: failure()
      - name: Print the environment
        run: c2cciutils-env
        env:
          GITHUB_EVENT: ${{ toJson(github) }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: make build
      - name: Checks
        run: make checks
      - name: Build example
        run: |
          # Workaround to get the right Makefile
          docker builder prune --all --force
          cd example-project/
          GITHUB_REPOSITORY=camptocamp/project make build
          GITHUB_REPOSITORY=camptocamp/project make checks
        # Rebuild the right image
      - name: Build
        run: make build

      - name: Publish
        run: c2cciutils-publish
        if: |
          env.HAS_SECRETS == 'HAS_SECRETS'

      - run: git diff --exit-code --patch > /tmp/dpkg-versions.patch || true
        if: failure()
      - uses: actions/upload-artifact@v4
        with:
          name: Update dpkg versions list.patch
          path: /tmp/dpkg-versions.patch
          retention-days: 1
        if: failure()
      - name: Trigger changelog workflow
        uses: actions/github-script@v7
        with:
          script: |-
            if (process.env.GITHUB_REF_TYPE == 'tag') {
                console.log('Trigger changelog');
                await github.rest.repos.createDispatchEvent({
                    owner: 'camptocamp',
                    repo: 'c2cciutils',
                    event_type: 'changelog',
                });
            }
  k8s:
    name: Kubernetes
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    steps:
      - run: docker system prune --all --force
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: echo "${HOME}/.local/bin" >> ${GITHUB_PATH}
      - run: python3 -m pip install --user --requirement=requirements.txt
      - run: poetry build
        env:
          POETRY_DYNAMIC_VERSIONING_BYPASS: 0.0.0
      - run: python3 -m pip install --user --force-reinstall dist/c2cciutils-0.0.0-py3-none-any.whl[k8s]
      - run: rm -rf dist build

      - name: Install
        run: c2cciutils-k8s-install

      - name: Create DB
        run: c2cciutils-k8s-db --script=test/init.sql

      - run: kubectl run test-pod --restart=Never --namespace=default --image=busybox --command -- tail -f /dev/null

      - name: Wait
        run: c2cciutils-k8s-wait
      - name: Logs
        run: c2cciutils-k8s-logs
        if: always()

      - name: Clean the database
        run: c2cciutils-k8s-db --cleanup
        if: always()

  audit:
    name: Audit
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    if: "!startsWith(github.event.head_commit.message, '[skip ci] ')"

    steps:
      - run: docker system prune --all --force
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: camptocamp/initialise-gopass-summon-action@v2
        with:
          ci-gpg-private-key: ${{secrets.CI_GPG_PRIVATE_KEY}}
          github-gopass-ci-token: ${{secrets.GOPASS_CI_GITHUB_TOKEN}}

      - run: python3 -m pip install --user --requirement=requirements.txt
      - run: ~/.local/bin/poetry build
        env:
          POETRY_DYNAMIC_VERSIONING_BYPASS: 0.0.0

      - run: python3 -m venv ~/.venv
      - run: ~/.venv/bin/pip install --force-reinstall dist/c2cciutils-0.0.0-py3-none-any.whl[audit]
      - run: python3 -m pip install dist/c2cciutils-0.0.0-py3-none-any.whl[audit]

      - name: Check .tool-versions file existence
        id: tool-versions
        uses: andstor/file-existence-action@v3
        with:
          files: .tool-versions
      - uses: asdf-vm/actions/install@v3
        if: steps.tool-versions.outputs.files_exists == 'true'
      - run: cat /tmp/python-build.*.log
        if: failure()
      - run: python --version

      - name: Audit
        run: ~/.venv/bin/c2cciutils-audit --branch=${{ github.ref }}
        env:
          TEST: 'TRUE'
          GITHUB_TOKEN: ${{ github.token }}
