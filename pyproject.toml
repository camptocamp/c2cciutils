[tool.ruff]
target-version = "py310"
line-length = 110

[tool.ruff.lint]
select = []
ignore = ["ANN401", "C90", "D100", "D104", "D105", "D107", "D200", "D202", "D207", "D208", "D212", "E501", "EM101", "EM102", "ERA001", "FA", "FBT001", "FBT002", "FIX002", "I001", "PERF203", "PLR09", "PLR2004", "Q000", "S101", "SIM105", "T201", "TD002", "W293"]
extend-select = ["UP", "I", "S", "B", "ALL"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**" = ["ANN", "ARG", "ASYNC", "D", "E722", "FBT003", "INP001", "N", "PLC0415", "PLR2004", "RET", "RUF012", "RUF100", "S108", "S113", "S603", "S607", "SLF"]
"**/tests/**" = ["ANN", "ARG", "ASYNC", "D", "E722", "FBT003", "INP001", "N", "PLC0415", "PLR2004", "RET", "RUF012", "RUF100", "S108", "S113", "S603", "S607", "SLF"]
"**/test_*.py" = ["ANN", "ARG", "ASYNC", "D", "E722", "FBT003", "INP001", "N", "PLC0415", "PLR2004", "RET", "RUF012", "RUF100", "S108", "S113", "S603", "S607", "SLF"]
"**/*_test.py" = ["ANN", "ARG", "ASYNC", "D", "E722", "FBT003", "INP001", "N", "PLC0415", "PLR2004", "RET", "RUF012", "RUF100", "S108", "S113", "S603", "S607", "SLF"]

[tool.poetry]
exclude = ["c2cciutils/node_modules/**/test"]
version = "0.0.0"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
requests = "2.32.4"
"ruamel.yaml" = "0.18.14"
PyYAML = "6.0.2"
applications-download = "1.3.4"

[tool.poetry.group.dev.dependencies]
prospector = { version = "1.17.3", extras = ["with-bandit", "with-mypy", "with-pyroma", "with-ruff", "with_ruff", "with_pyroma"] }
prospector-profile-duplicated = "1.10.5"
prospector-profile-utils = "1.26.3"
ruff = "0.12.7"
types-requests = "2.32.4.20250611"
types-pyyaml = "6.0.12.20250516"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
pattern = "^(?P<base>\\d+(\\.\\d+)*)"
format-jinja = """
{%- if env.get("VERSION_TYPE") == "default_branch" -%}
{{serialize_pep440(bump_version(base, 1), dev=distance)}}
{%- elif env.get("VERSION_TYPE") == "stabilization_branch" -%}
{{serialize_pep440(bump_version(base, 2), dev=distance)}}
{%- elif distance == 0 -%}
{{serialize_pep440(base)}}
{%- else -%}
{{serialize_pep440(bump_version(base), dev=distance)}}
{%- endif -%}
"""

[tool.poetry-plugin-tweak-dependencies-version]
default = "major"
codespell = "full"
cryptography = "present"
certifi = "present"

[project]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Environment :: Console',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Operating System :: OS Independent',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Typing :: Typed',
]
dynamic = ["dependencies", "version"]
name = "c2cciutils"
description = "Common utilities for Camptocamp CI"
readme = "README.md"
keywords = ["ci"]
license = "FreeBSD"
authors = [{name = "Camptocamp",email = "info@camptocamp.com"}]
packages = [{ include = "c2cciutils" }]
include = [
    "c2cciutils/py.typed",
    "c2cciutils/*.graphql",
    "c2cciutils/*.yaml",
    "c2cciutils/*.json",
]
requires-python = ">=3.10"
dependencies = ["requests<3,>=2", "ruamel.yaml<1,>=0", "PyYAML<7,>=6", "applications-download<2,>=1"]

[project.urls]
repository = "https://github.com/camptocamp/c2cciutils"
"Bug Tracker" = "https://github.com/camptocamp/c2cciutils/issues"

[project.scripts]
c2cciutils = "c2cciutils.scripts.main:main"
c2cciutils-env = "c2cciutils.scripts.env:main"
c2cciutils-k8s-install = "c2cciutils.scripts.k8s.install:main"
c2cciutils-k8s-db = "c2cciutils.scripts.k8s.db:main"
c2cciutils-k8s-wait = "c2cciutils.scripts.k8s.wait:main"
c2cciutils-k8s-logs = "c2cciutils.scripts.k8s.logs:main"
c2cciutils-docker-logs = "c2cciutils.scripts.docker_logs:main"

[build-system]
requires = [
    "poetry-core>=1.0.0",
    "poetry-dynamic-versioning[plugin]>=0.19.0",
    "poetry-dynamic-versioning",
    # "poetry-plugin-drop-python-upper-constraint",
]
build-backend = "poetry.core.masonry.api"
